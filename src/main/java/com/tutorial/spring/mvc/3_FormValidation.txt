FORM VALIDATION

@Size
@Size(min=2, max=30)
private String studentHobby;
If out of min and max range then that error bind to the "BindingResult".
 
@valid
If we are using "@Valid" annotation with @ModelAttribute annotation, then only spring MVC will consider the "@Size" annotation.
If we are not writing "@Valid" annotation with @ModelAttribute annotation, then spring MVC will simple ignore the "@Size" annotation.
@Valid annotation activate or enable the @Size annotation.
	(@Valid @ModelAttribute("emp") Employee emp, BindingResult bindingReult)
 
To use annotation related to bean validation in spring MVC, for that, 
	we need to include third party library that implement JSR 303 & JSR 349.
JSR 303 & JSR 349 implementor library
	Apache Validator library
	HIbernate Bean validator library: Most popular bean validation library for Spring MVC
		http://hibernate.org/validator/downloads/

JSR are set of standard provided by JCP.
	JSR: Java Specification Request
	JCP: Java Community Process


Custom error messages:
	We can also use "message" attribute inside "@Size" annotation.
		@Size(min = 2, max = 20, message = "Please enter the value of employee hobby field between 2 to 20 characters")
		private String hobby;
	We can set “min” and “max” value to the “message”
		@Size(min = 2, max = 20, message = "Please enter the value of employee hobby field between {min} to {max} characters")


Customizing error messages using Spring MessageSource
	Using “properties” file such as “employeemessages.properties” 
	Size.emp.hobby=please enter the value for hobby between 2 to 20 characters.
	or
	Size.emp.hobby=please enter the value for{0} between {2} to {1} characters.


Add this code in "spring-dispatcher-servlet.xml" file
<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
	<property name="basename" value="/WEB-INF/employeemessages"/>
	<property name="cacheSeconds" value="1"/>
</bean>

Normally, when we change in properties file, we have to restart web server.
If we don't want to restart after every change in properties file then we need to include following:
<property name="cacheSeconds" value="1"/>

Spring MVC would search for a key matching with this key pattern sequence
1)[Validation Annotation Name].[Object Reference Name].[Field Name]
	Example: In this case, Size.emp.hobby

2)If above key pattern not found, then Spring MVC would search for a key matching with this key pattern-
	[Validation Annotation Name].[Field Name]
	Example: in this case, Size.hobby

3)If above key pattern not found, then Spring MVC would search for a key matching with this key pattern-
	[Validation Annotation Name].[Field Type]
	Example: in this case, Size.java.lang.String
	
4)	If above key pattern not found, then Spring MVC would search for a key matching with this key pattern-
	[Validation Annotation Name]
	Example: in this case, Size
	
5)If above key pattern also not found, then Spring MVC would use the default error message for that constraint violation.
	Example: In this case, size must be 2 and 20(default error message for the Size constraint)

 
Using “properties” file such as “employeemessages.properties” 
	Size.emp.hobby=please enter the value for {0} between {2} to {1} characters.
Important points:
	(1) Placeholder {0} is always replaced dynamically by Spring MVC with the name of field for which violation occurs.
		Example: In this demo, violation occurs for employee hobby field; so {0} was was replaced with "hobby".
	(2) Placeholder {1}, {2}, {3} and so on... would be replaced with the arguments values passed to the constraint annotation.
		Example:
			In this demo, we passed two arguments to @Size annotation i.e min=2 and max=20; so, 
			placeholder {2} and {1} were replaced with these arguments values.
	(3) Why in this demo, placeholder {1} was replaced with max argument value i.e 20 and not with the min argument value i.e 2??
	Answer:
	Its because Spring MVC uses "alphabetical order" of the arguments to decide upon which placeholder to be replaced with which argument value
	in this demo, max comes before min argument, so {1} was replaced with the max value and {2} was replaced with the min value.








FORM VALIDATION(@Pattern, @Max, @Past...)
@Pattern(regexp="[^0-9]*")
private String name;
	Whatever argument added to the @Pattern annotation, then that pattern provide as validation task for the employee property.
If we enter digit at the place of name field, then should have to show error message.
So that spring MVC provide annotation to perform these activity.

@Past annotation
@Past
private String dob;
:To show binding error message for the dob, put @Past annotation on top of that property.

@Max annotation
If we are performing data binding task for any property and fixing maximum value for that property, then use @Max annotation.
@Max(2222)
private Long employeeMobile;

@Future
:Checks whether that annotation date is in the future.

@Min
: Check whether the annotated value is higher than or equal to the specified minimum.

@NotNull
:Check that the annotated value is not null.

@NotEmpty
: Check if the String is not null or empty.
(@NotEmpty not supported by Bean Validation specification...
	It's only available to developers if they are using Hibernate library in their Spring MVC Application)






A custom form validation annotation
for any specific requirement, if these annotation is not useful then we create own custom form validation annotation.

Create a custom form validation with the annotation with the name - IsValidHobby
STEPS:
(1) Create a java file(called as an annotation type or simply an interface - IsValidHobby.java ) 
	  Having complete definition of this custom annotation
:- like name of custom annotation, the default error message information etc.

(2) Create a java file(a class - HobbyValidator.java) 
	  Having the validation logic used by this custom annotation to validate the user input.

HobbyValidator.java
public class HobbyValidator implements ConstraintValidator<IsValidHobby, String> {
	@Override
	public void initialize(IsValidHobby isValidHobby) {
	}
	@Override
	public boolean isValid(String hobby, ConstraintValidatorContext ctx) {
		if (hobby == null) {
			return false;}
		if (hobby.matches("Music|Football|Cricket|Hockey")) {
			return true;
		} else {
			return false;
		}
	}
}

IsValidHobby.java
@Documented
@Constraint(validatedBy = { HobbyValidator.class })
@Target({ ElementType.FIELD })
@Retention(RetentionPolicy.RUNTIME)
public @interface IsValidHobby {
	String message() default "Please provide a valid hobby"+ "accepted hobbies are - Music, football, Cricket and Hockey (choose anyone) ";
	Class<?>[] groups() default {};
	Class<? extends Payload>[] payload() default {};
}
A validator class used by a custom annotation always - 
	implements the "ConstraintValidator" interface and override two of its methods (with the name - "initialize" and "isValid")

	
	
A custom form validation annotation with attribute
@Size(min = 2, max = 20) 
@IsValidHobby(listOfValidHobby="Music|Football|Cricket|Hockey")
//@IsValidHobby()
private String hobby;

@Documented
@Constraint(validatedBy = { HobbyValidator.class })
@Target({ ElementType.FIELD })
@Retention(RetentionPolicy.RUNTIME)
public @interface IsValidHobby {
	//To set the default value for the @IsValidHobby annotation argument using "default" 
	String listOfValidHobby() default "Music|Football|Cricket|Hockey";
	//String listOfValidHobby();

	String message() default "Please provide a valid hobby"
			+ "accepted hobbies are - Music, football, Cricket and Hockey (choose anyone) ";

	Class<?>[] groups() default {};
	Class<? extends Payload>[] payload() default {};
}

public class HobbyValidator implements ConstraintValidator<IsValidHobby, String> {
	private String listOfValidHobbies;
	@Override
	public void initialize(IsValidHobby isValidHobby) {
		this.listOfValidHobbies = isValidHobby.listOfValidHobby();
	}
	@Override
	public boolean isValid(String hobby, ConstraintValidatorContext ctx) {
		// TODO Auto-generated method stub
		if (hobby == null) {
			return false;
		}
		if (hobby.matches(listOfValidHobbies)) {
			return true;
		} else {
			return false;
		}
	}
}

